<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | 电脑]]></title>
  <link href="http://nanliu.github.com/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://nanliu.github.com/"/>
  <updated>2013-02-20T19:24:36-08:00</updated>
  <id>http://nanliu.github.com/</id>
  <author>
    <name><![CDATA[Nan Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Device Management with Puppet]]></title>
    <link href="http://nanliu.github.com/blog/2013/02/20/device-management-with-puppet/"/>
    <updated>2013-02-20T17:14:00-08:00</updated>
    <id>http://nanliu.github.com/blog/2013/02/20/device-management-with-puppet</id>
    <content type="html"><![CDATA[<p>In Puppet 2.7, one of the new features added was device management. In this initial release, only a small number of Cisco switches were supported. Overall the capabilities weren’t really signifcant, however the concept shifted people’s perception of the boundaries for configuration management. All of sudden Puppet didn’t end at the operating system, and extended to black boxes that were previously thought to be a bridge too far.</p>

<p><img src="/images/inception_dream.gif" title="‘dream big’" ></p>

<p>This slowly spawned a flurry of activities exploring network devices, load-balancers, and storage:</p>

<ul>
  <li><a href="http://www.juniper.net/techpubs/en_US/junos-puppet0.8/topics/concept/automation-junos-puppet-overview.html">Juniper</a><sup id="fnref:fn-juniper"><a href="#fn:fn-juniper" rel="footnote">1</a></sup>: <a href="https://github.com/jeremyschulman/puppet-netdev">puppet-netdev</a></li>
  <li><a href="https://devcentral.f5.com/blogs/us/f5-friday-how-to-stop-running-the-project-gauntlet-of-doom-with-devops">F5 Big-IP</a>: <a href="https://github.com/puppetlabs/puppetlabs-f5">puppetlabs-f5</a></li>
  <li><a href="http://forge.puppetlabs.com/fatmcgav/netapp">Net App</a>: <a href="https://github.com/fatmcgav/fatmcgav-netapp">fatmcgav-netapp</a></li>
</ul>

<p>The benefits of having the entire infrastracture automated with a single tool chain under version control is indisputable. A Software Define Data Center is not complete until you gap the management capabilities whether it’s your network or storage. </p>

<p>It’s clear after working with devices that any attempt to automate them must leverage their respective APIs. Without Netconf, iControl, NetApp SDK, non of the modules would been possible. Automation built purely around CLI interactions and output parsing would be extremely brittle.</p>

<p>Next week at <a href="http://communities.vmware.com/community/vmtn/partner-exchange">VMware Partners Exchange</a> (PEX 2013), <a href="http://nickapedia.com/2013/02/01/stuff-to-see-puppet-pex-and-more/">Nick Weaver</a> and Carl Caum will present more about Puppet and how it works with VMware Products at session VPN1298. We plan to provide VMware users with a set of Puppet modules for management of vCenter/vShield (vCloud Network and Security):</p>

<p><img src="/images/puppet_device.png" title="‘Puppet and vSphere vShield API’" ></p>

<p>Currently, puppet devices can only communicate with a single device at a time. After working with vShield API, it’s clear we needed the capabilities to communicate with multiple devices due to it’s dependency of <a href="http://kb.vmware.com/kb/1017126">vSphere Managed Object Reference (MoRef)</a>. ‘esx-13’ might be understandable to a computer, but for configuration purpose ‘test_esx_host’ would make much more sense to an admin. </p>

<p>For this reason, we developed transport resource to support ssh, vSphere, and vShield connectivity for a single puppet execution:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">transport</span> <span class="p">{</span> <span class="err">‘</span><span class="n">ssh</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>  <span class="n">username</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">nan</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">secret</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="n">server</span>   <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">10</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># support connection options in net::ssh :</span>
</span><span class='line'>  <span class="n">options</span>  <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span> <span class="err">‘</span><span class="n">port</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">10022</span> <span class="p">},</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;transport { ‘vshield’:</span>
</span><span class='line'><span class="sr">  username =&amp;gt; ‘admin’,</span>
</span><span class='line'><span class="sr">  password =&amp;gt; ‘default’,</span>
</span><span class='line'><span class="sr">  server   =&amp;gt; ‘vshield.lab’</span>
</span><span class='line'><span class="sr">}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">transport</span> <span class="p">{</span> <span class="err">‘</span><span class="n">vcenter</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>  <span class="n">username</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">root</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">vmware</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="n">server</span>   <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">vcenter</span><span class="o">.</span><span class="n">lab</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># support RbVmomi options:</span>
</span><span class='line'>  <span class="n">options</span>  <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span> <span class="err">‘</span><span class="n">insecure</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">true</span><span class="p">,</span> <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A resource can leverage any transport connectivity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vcsa_eula</span> <span class="p">{</span> <span class="vg">$name</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">accept</span><span class="p">,</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">Transport</span><span class="o">[</span><span class="err">‘</span><span class="n">ssh</span><span class="err">’</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;vc_datacenter { ‘datacenter1’:</span>
</span><span class='line'><span class="sr">  path      =&amp;gt; ‘/</span><span class="n">datacenter1</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="k">ensure</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">Transport</span><span class="o">[</span><span class="err">‘</span><span class="n">vcenter</span><span class="err">’</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hopefully this gave a good glimpse without revealing too much ahead of the event. Stay tuned, and I will provide more techinical details next week after PEX.</p>

<div class="footnotes">
  <ol>
    <li id="fn:fn-juniper">
      <p>Juniper has gone as far as embedding Puppet agent to the device.<a href="#fnref:fn-juniper" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Puppet 3.x]]></title>
    <link href="http://nanliu.github.com/blog/2013/02/08/migrating-to-puppet-3-dot-x/"/>
    <updated>2013-02-08T01:52:00-08:00</updated>
    <id>http://nanliu.github.com/blog/2013/02/08/migrating-to-puppet-3-dot-x</id>
    <content type="html"><![CDATA[<p>I am a bit late to the Puppet 3.0 party, since 3.1 have been released recently<sup id="fnref:fn-semver"><a href="#fn:fn-semver" rel="footnote">1</a></sup>. After reading the <a href="http://docs.puppetlabs.com/puppet/3/reference/release_notes.html">release notes</a> and <a href="http://somethingsinistral.net/blog/the-angry-guide-to-puppet-3/">“The Angry Guide to Puppet 3”</a>, I thought most of the upgrade issues have been covered, but there was still a small surprise when it comes to types and providers.</p>

<p>The <a href="http://docs.puppetlabs.com/puppet/3/reference/release_notes.html#exec">Exec resource</a> had a small behavior change noted as: “Due to misleading values, the HOME and USER environment variables are now unset when running commands.”</p>

<p>The impact is a bit more significant than updating Exec resource since it also affects commands declared in providers. If the invoked command depends on the HOME environment variables such as brew, it will fail in Puppet 3:</p>

<pre><code>Error: /Stage[main]//Package[rbenv]:
Could not evaluate: Could not list packages:
Execution of '/usr/local/bin/brew list --versions rbenv' returned 1:
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/pathname.rb:853:in `expand_path':
couldn't find HOME environment -- expanding `~/Library/Caches/Homebrew' (ArgumentError)
from /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/pathname.rb:853:in `expand_path'
from /usr/local/Library/Homebrew/global.rb:22:in `cache'
from /usr/local/Library/Homebrew/global.rb:41
from /usr/local/bin/brew:17:in `require'
from /usr/local/bin/brew:17
</code></pre>

<p>The solution is described in <a href="http://projects.puppetlabs.com/issues/16779">#16779</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Setting command environment variables</span><a href='http://projects.puppetlabs.com/issues/16779'>16779 </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_command</span><span class="p">(</span><span class="ss">:brew</span><span class="p">,</span> <span class="err">‘</span><span class="n">brew</span><span class="err">’</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">environment</span><span class="p">({</span> <span class="err">‘</span><span class="no">HOME</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">HOME</span><span class="err">’</span><span class="o">]</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The method ‘has_command’ is not backwards compatible with Puppet 2.x, so we need to wrap it around some version check:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Util</span><span class="o">::</span><span class="no">Package</span><span class="o">.</span><span class="n">versioncmp</span><span class="p">(</span><span class="no">Puppet</span><span class="o">.</span><span class="n">version</span><span class="p">,</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">has_command</span><span class="p">(</span><span class="ss">:brew</span><span class="p">,</span> <span class="err">“</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">brew</span><span class="err">”</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">environment</span><span class="p">({</span> <span class="err">‘</span><span class="no">HOME</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">HOME</span><span class="err">’</span><span class="o">]</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">commands</span> <span class="ss">:brew</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">“</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">brew</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;brew(‘list’, ‘–versions’)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This also means execute will strip these two environment variables as well, so commands pass :custom_environment to preserve this value. execute is less common, and don’t use it unless you need special behavior such as :failonfail =&gt; false:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">execute</span><span class="p">(</span><span class="o">[</span><span class="n">command</span><span class="p">(</span><span class="ss">:brew</span><span class="p">),</span> <span class="err">‘</span><span class="n">list</span><span class="err">’</span><span class="p">,</span> <span class="err">‘–</span><span class="n">version</span><span class="err">’</span><span class="o">]</span><span class="p">,</span> <span class="ss">:custom_environment</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span><span class="err">‘</span><span class="no">HOME</span><span class="err">’</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">HOME</span><span class="err">’</span><span class="o">]</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hope this is helpful for anyone else who stumbles into this issue.</p>

<div class="footnotes">
  <ol>
    <li id="fn:fn-semver">
      <p>The proliferation of versions might be alarming, but it’s due to stricter adherence to semantic versioning. The changes 3.0 3.1 is closer to 2.7.0 to 2.7.1 than 2.6 to 2.7.<a href="#fnref:fn-semver" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
